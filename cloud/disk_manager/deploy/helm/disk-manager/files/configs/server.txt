{{- if eq .Values.serviceKind "controlplane" }}
GrpcConfig: {
  Port: {{- .Values.service.internalPort}}
  {{- if not .Values.insecure }}
  certs: [
    {
      cert_file: "{{ .Values.certificates.balancer.certFile }}"
      private_key_file: "{{ .Values.certificates.balancer.privateKeyFile }}"
    },
    {
      cert_file: "{{ .Values.certificates.svms.certFile }}"
      private_key_file: "{{ .Values.certificates.svms.privateKeyFile }}"
    }
  ]
  {{- else }}
  Insecure: true
  {{- end }}
  KeepAlive: {}
}
{{- end }}
TasksConfig: {
{{- if eq .Values.serviceKind "dataplane" }}
    {{- $zones := keys .Values.zones }}
    {{- $length := len $zones }}
        ZoneIds: [{{- range $i, $zone := $zones }}{{ if $i }}, {{ end }}"{{ $zone }}"{{- end }}]
{{- end }}
{{- if .Values.tasksConfig.runnersCount }}
    RunnersCount: {{ .Values.tasksConfig.runnersCount }}
{{- end }}
{{- if .Values.tasksConfig.stalkingRunnersCount }}
    StalkingRunnersCount: {{ .Values.tasksConfig.stalkingRunnersCount }}
{{- end }}
    ExceptHangingTaskTypes: [
        "tasks.CollectListerMetrics",
        "disks.CreateDiskFromImage",
        "disks.CreateDiskFromSnapshot",
        "disks.MigrateDisk",
        "images.CreateImageFromURL",
        "images.CreateImageFromDisk",
        "images.CreateImageFromSnapshot",
        "images.DeleteImage",
        "pools.OptimizeBaseDisks",
        "snapshots.CreateSnapshotFromDisk",
        "snapshots.DeleteSnapshot",
        "transfer.TransferFromImageToDisk",
        "transfer.TransferFromSnapshotToDisk",
        "pools.RetireBaseDisks",
        "pools.RebaseOverlayDisk",
        "dataplane.CreateSnapshotFromDisk",
        "dataplane.TransferFromDiskToDisk",
        "dataplane.ReplicateDisk",
        "dataplane.TransferFromSnapshotToDisk",
        "dataplane.TransferFromLegacySnapshotToDisk",
        "dataplane.CreateSnapshotFromLegacySnapshot",
        "dataplane.DeleteSnapshotData",
        "dataplane.CollectSnapshots",
        "dataplane.CollectSnapshotMetrics",
        "dataplane.CreateSnapshotFromURL"
    ]
    InflightTaskPerNodeLimits: {
        key: "dataplane.ReplicateDisk"
        value: 2
    }
}
NbsConfig: {
{{- range $zone, $params := .Values.zones }}
    Zones: {
        key: "{{ $zone }}"
        value: {
            Endpoints: [
            {{- $length := len $params.nbsSvms }}
            {{- range $i, $svm := $params.nbsSvms }}
                "{{ $svm }}:{{ $params.nbsPort }}"{{- if lt $i (sub $length 1) }},{{- end }}
            {{- end }}
            ]
        }
    }
{{- end }}
    GrpcKeepAlive: {}
{{- if and .Values.nbs.nbsControl .Values.nbs.nbsControl.insecure }}
    Insecure: true
    DisableAuthentication: true
{{- end }}
{{- if and .Values.nbs.nbsControl .Values.nbs.nbsControl.enableThrottlingForMediaKinds }}
    EnableThrottlingForMediaKinds: [
    {{- $length := len .Values.nbs.nbsControl.enableThrottlingForMediaKinds }}
    {{- range $i, $kind := .Values.nbs.nbsControl.enableThrottlingForMediaKinds }}
        "{{ $kind }}"{{- if lt $i (sub $length 1) }},{{- end }}
    {{- end }}
    ]
{{- end }}
{{- if and .Values.nbs.nbsControl .Values.nbs.nbsControl.useGZIPCompression }}
    UseGZIPCompression: true
{{- end }}
}
{{- if eq .Values.serviceKind "controlplane" }}
DisksConfig: {
    OverlayDisksFolderIdBlacklist: [
        "yc.nbs.nbs-control"
    ]
}
{{- if .Values.nfs.enabled }}
NfsConfig: {
{{- range $zone, $params := .Values.zones }}
    Zones: {
        key: "{{ $zone }}"
        value: {
            Endpoints: [
            {{- $length := len $params.nfsSvms }}
            {{- range $i, $svm := $params.nfsSvms }}
                "{{ $svm }}:{{ $params.nfsPort }}"{{- if lt $i (sub $length 1) }},{{- end}}
            {{- end }}
            ]
        }
    }
{{- end }}
    Insecure: {{ .Values.nfs.insecure}}
    DisableAuthentication: {{ .Values.nfs.disableAuthentication}}
}
{{- end }}
FilesystemConfig: {
}
PoolsConfig: {
{{- with .Values.poolsConfig }}
{{- if .maxActiveSlots }}
    MaxActiveSlots: {{ .maxActiveSlots }}
{{- end }}
{{- if .maxBaseDisksInflight }}
    MaxBaseDisksInflight: {{ .maxBaseDisksInflight }}
{{- end }}
{{- if .maxBaseDiskUnits }}
    MaxBaseDiskUnits: {{ .maxBaseDiskUnits }}
{{- end }}
{{- if .takeBaseDisksToScheduleParallelism }}
    TakeBaseDisksToScheduleParallelism: {{ .takeBaseDisksToScheduleParallelism }}
{{- end }}
{{- if .deleteBaseDisksLimit }}
    DeleteBaseDisksLimit: {{ .deleteBaseDisksLimit }}
{{- end }}
{{- end }}
}
ImagesConfig: {
    DefaultDiskPoolConfigs: [
    {{- $zones := keys .Values.zones }}
    {{- $length := len $zones }}
    {{- range $i, $zone := $zones }}
        {
            ZoneId: "{{ $zone }}"
        }{{- if lt $i (sub $length 1) }},{{- end}}
    {{- end }}
    ]
}
SnapshotsConfig: {
{{- if .Values.snapshotsUseProxyOverlayDisk }}
    UseProxyOverlayDisk: {{ .Values.snapshotsUseProxyOverlayDisk }}
{{- end }}
}
{{- end }}
LoggingConfig: {
    LoggingStderr: {}
    Level: {{ .Values.logLevel }}
}
MonitoringConfig: {
{{- if .Values.monitoringPort }}
    Port: {{ .Values.monitoringPort }}
{{- end }}
    RestartsCountFile: "/etc/yc/disk-manager-external/restarts-count.txt"
    ServerVersionFile: "/usr/lib/yc/disk-manager/server-version.txt"
}
AuthConfig: {
{{- if and .Values.authConfig .Values.authConfig.disableAuthorization }}
    DisableAuthorization: true
{{- else }}
    MetadataUrl: "http://localhost:6770/computeMetadata/v1/instance/service-accounts/default/token"
{{- end }}
{{- if eq .Values.serviceKind "controlplane" }}
    AccessServiceEndpoint: "{{ .Values.authConfig.AccessServiceEndpoint }}"
    FolderId: "yc.disk-manager.disk-manager-permissions"
{{- end }}
}
PersistenceConfig: {
{{- if .Values.ydb.secure }}
    Secure: true
{{- end }}
{{- if .Values.ydb.disableAuthentication}}
    DisableAuthentication: true
{{- end }}
    Endpoint: "{{ .Values.ydb.endpoint }}:{{ .Values.ydb.port }}"
    Database: "{{ .Values.ydb.database }}"
{{- if .Values.ydb.rootPath }}
    RootPath: "{{ .Values.ydb.rootPath }}"
{{- end }}
}
{{- if eq .Values.serviceKind "dataplane" }}
DataplaneConfig: {
    SnapshotConfig: {
        PersistenceConfig: {
{{- if .Values.ydb.secure }}
            Secure: true
{{- end }}
            Endpoint: "{{ .Values.ydb.snapshot.endpoint }}:{{ .Values.ydb.snapshot.port }}"
            Database: "{{ .Values.ydb.snapshot.database }}"
{{- if .Values.ydb.snapshot.rootPath }}
            RootPath: "{{ .Values.ydb.snapshot.rootPath }}"
{{- end }}
        }
{{- if .Values.chunkBlobsTableShardCount }}
        ChunkBlobsTableShardCount: {{ .Values.chunkBlobsTableShardCount }}
{{- end }}
{{- if .Values.chunkMapTableShardCount }}
        ChunkMapTableShardCount: {{ .Values.chunkMapTableShardCount }}
{{- end }}
{{- if .Values.externalBlobsMediaKind }}
        ExternalBlobsMediaKind: "{{ .Values.externalBlobsMediaKind }}"
{{- end }}
{{- if .Values.deleteWorkerCount }}
        DeleteWorkerCount: {{ .Values.deleteWorkerCount }}
{{- end }}
{{- if .Values.shallowCopyWorkerCount }}
        ShallowCopyWorkerCount: {{ .Values.shallowCopyWorkerCount }}
{{- end }}
{{- if .Values.shallowCopyInflightLimit }}
        ShallowCopyInflightLimit: {{ .Values.shallowCopyInflightLimit }}
{{- end }}
{{- if .Values.probeCompressionPercentage }}
{{- range $codec, $percentage := .Values.probeCompressionPercentage }}
ProbeCompressionPercentage: {
    key: "{{ $codec }}"
    value: {{ $percentage }}
}
{{- end }}
{{- end }}
    }
{{- if .Values.readerCount }}
    ReaderCount: {{ .Values.readerCount }}
{{- end }}
{{- if .Values.writerCount }}
    WriterCount: {{ .Values.writerCount}}
{{- end }}
{{- if .Values.chunksInflightLimit }}
    ChunksInflightLimit: {{ .Values.chunksInflightLimit }}
{{- end }}
{{- if .Values.snapshotCollectionInflightLimit }}
    SnapshotCollectionInflightLimit: {{ .Values.snapshotCollectionInflightLimit }}
{{- end }}
}
{{- end }}