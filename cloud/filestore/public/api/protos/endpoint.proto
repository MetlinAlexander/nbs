syntax = "proto3";

import "cloud/filestore/public/api/protos/headers.proto";
import "cloud/storage/core/protos/error.proto";

package NCloud.NFileStore.NProto;

option go_package = "a.yandex-team.ru/cloud/filestore/public/api/protos";

////////////////////////////////////////////////////////////////////////////////
// Endpoint configuration.

message TEndpointConfig
{
    // FileSystem identifier.
    string FileSystemId = 1;

    // Client identifier.
    string ClientId = 2;

    // Socket for the endpoint.
    string SocketPath = 3;

    // Mount options.
    bool ReadOnly = 4;

    // Session options.
    uint32 SessionRetryTimeout = 5;
    uint32 SessionPingTimeout = 6;

    // Service endpoint name.
    string ServiceEndpoint = 7;

    // FileSystem generation.
    uint64 MountSeqNumber = 8;

    // Vhost queues count.
    uint32 VhostQueuesCount = 9;

    // Restore endpoint after restart
    bool Persistent = 10;
}

////////////////////////////////////////////////////////////////////////////////
// StartEndpoint request/response

message TStartEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Endpoint configuration.
    TEndpointConfig Endpoint = 2;
}

message TStartEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// StopEndpoint request/response

message TStopEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Socket for the endpoint.
    string SocketPath = 2;
}

message TStopEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}

////////////////////////////////////////////////////////////////////////////////
// ListEndpoints request/response

message TListEndpointsRequest
{
    // Optional request headers.
    THeaders Headers = 1;
}

message TListEndpointsResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;

    // List of endpoints.
    repeated TEndpointConfig Endpoints = 2;
}

////////////////////////////////////////////////////////////////////////////////
// KickEndpoint request/response

message TKickEndpointRequest
{
    // Optional request headers.
    THeaders Headers = 1;

    // Keyring identifier.
    uint32 KeyringId = 2;
}

message TKickEndpointResponse
{
    // Optional error, set only if error happened.
    NCloud.NProto.TError Error = 1;
}
